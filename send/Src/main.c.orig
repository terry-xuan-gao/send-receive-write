/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
//用户头文件
#include "sys.h"
#include "delay.h"
#include "24l01.h"
#include "stdio.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
//私有类型定义

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//私有定义

#define a ox1;
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
//私有宏

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
//私有变量
u8 tmp_buf[32]= {0x01,0x08,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x30,0x31,0x32};
u8 rv_data[32];
u8 mode=0;//发送模式还是接收模式选择 0发送模式 1接收模式
u8 status_tx=0;
u8 status_rx=0;
uint16_t ADC_Value[16];
uint16_t w=0;
uint32_t count_send_fail=0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
//私有函数原型

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

    uint8_t temp[1]= {0x11};
    HAL_UART_Transmit(&huart1,temp,1,2);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_SPI1_Init();
  MX_USART1_UART_Init();
  MX_ADC1_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */

    NRF24L01_Init();  //初始化NRF24L01
    while(NRF24L01_Check())//函数返回值为1说明检测24L01错误	！！！
    {
        printf("\n\r nrf测试失败 nrf未连接\n\r");
        break ;
    }

    HAL_ADCEx_Calibration_Start(&hadc1);//校准
    HAL_Delay(10);
    if(HAL_TIM_Base_Start_IT(&htim3)!=HAL_OK) printf("\r\n******** 定时器打开失败 ********\r\n\r\n");
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, 16);

    while(NRF24L01_Check()==0)
    {
        printf("\n\r nrf测试成功 nrf连接\n\r");
        //Rx接收模式
        if(mode==1)
        {
            printf("\n\r 接收模式\n\r");
            for(int i=0; i<34; i++)
            {
                NRF24L01_RX_Mode();
                status_rx  = NRF24L01_RxPacket(tmp_buf);//一次传输32个字节。接收的数据保存在tmp_buf数组中。返回值0为接收成功
                HAL_Delay (1000);
            }

        }
        if(mode ==0)
        {
            int k=0;
            printf("\n\r 发送模式\n\r");
            NRF24L01_TX_Mode();
            SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_16);
            for(int i=0; i<3; i++)
            {
                printf ("\r\n******** 通道的值 ,%d,%d,%d,%d,%d,%d,%d,%d********\r\n\r\n",ADC_Value[0],ADC_Value[1],ADC_Value[2],ADC_Value[3],ADC_Value[4],ADC_Value[5],ADC_Value[6],ADC_Value[7]);
//               printf("第一通道为%d,%d",tmp_buf[0],tmp_buf[1]);
                //tx发送模式
                HAL_Delay(200);
//                status_tx=NRF24L01_TxPacket((uint8_t *)ADC_Value);//函数返回值为发送完成状态
//                printf("发送状态为%d,%d",status_tx,i+1);//输出发送状态
                if(status_tx==0x10)
                {
                    k++;
                }
            }
            printf("shibai %d",k);
        }
        break ;
    }

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1)
    {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
//DMA传输完成中断回调函数
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
    w++;
//    status_tx=NRF24L01_TxPacket((uint8_t *)ADC_Value);
    if(w==2000)
    {
        HAL_GPIO_TogglePin(BSP_LED0_GPIO_Port,BSP_LED0_Pin);
        w=0;
//        count_send++;
//		status_tx=NRF24L01_TxPacket((uint8_t *)ADC_Value);
//		printf("发送状态为%d,%d",status_tx,count_send);//输出发送状态
    }


//		v[0] = ADC_Value[0]* 3.3 / 4095.0; //参考电压为：3.3V
//	v[1] = ADC_Value[1]* 3.3 / 4095.0; //参考电压为：3.3V
//
}
/**
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
//定时器全局中断回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

    static uint16_t count1=0,count2=0;
    /* Prevent unused argument(s) compilation warning */
    if(htim->Instance==TIM3)
    {   count1++;
			count2++;

        if(count1 == 400)
        {
            count1=0;
            status_tx=NRF24L01_TxPacket((uint8_t *)ADC_Value);
					                if(status_tx==0x10)
                {
                    count_send_fail++;
                }
        }
				if(count2==1000)
{
	printf("shibai %d",count_send_fail);
	count2=0;
}
    }


    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
     */
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
       tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
